Component: ARM Compiler 6.16 Tool: armlink [5dfeaa00]

==============================================================================

Section Cross References

    main.o(.text.TIM2_IRQHandler) refers to main.o(.data..L_MergedGlobals) for .L_MergedGlobals
    main.o(.text.TIM2_IRQHandler) refers to main.o(.bss.TIM2_IRQHandler.line) for TIM2_IRQHandler.line
    main.o(.text.TIM2_IRQHandler) refers to main.o(.bss.vgaScreenBuff) for vgaScreenBuff
    main.o(.text.TIM2_IRQHandler) refers to main.o(.bss.vgaScreenBuff2) for vgaScreenBuff2
    main.o(.ARM.exidx.text.TIM2_IRQHandler) refers to main.o(.text.TIM2_IRQHandler) for [Anonymous Symbol]
    main.o(.text.TIM3_IRQHandler) refers to main.o(.bss..L_MergedGlobals.1) for .L_MergedGlobals.1
    main.o(.text.TIM3_IRQHandler) refers to main.o(.data..L_MergedGlobals) for .L_MergedGlobals
    main.o(.text.TIM3_IRQHandler) refers to main.o(.bss.vgaScreenBuff) for vgaScreenBuff
    main.o(.text.TIM3_IRQHandler) refers to main.o(.bss.vgaScreenBuff2) for vgaScreenBuff2
    main.o(.ARM.exidx.text.TIM3_IRQHandler) refers to main.o(.text.TIM3_IRQHandler) for [Anonymous Symbol]
    main.o(.text.USART2_IRQHandler) refers to main.o(.bss..L_MergedGlobals.1) for .L_MergedGlobals.1
    main.o(.text.USART2_IRQHandler) refers to comport.o(.bss.uartBuff) for uartBuff
    main.o(.ARM.exidx.text.USART2_IRQHandler) refers to main.o(.text.USART2_IRQHandler) for [Anonymous Symbol]
    main.o(.text.main) refers to main.o(.data..L_MergedGlobals) for .L_MergedGlobals
    main.o(.text.main) refers to main.o(.bss.vgaScreenBuff) for vgaScreenBuff
    main.o(.text.main) refers to vga.o(.text.VGACreateFrame) for VGACreateFrame
    main.o(.text.main) refers to main.o(.bss.vgaScreenBuff2) for vgaScreenBuff2
    main.o(.text.main) refers to drivers.o(.text.startup) for startup
    main.o(.text.main) refers to main.o(.bss..L_MergedGlobals.1) for .L_MergedGlobals.1
    main.o(.text.main) refers to vga.o(.text.VGADrawCircle) for VGADrawCircle
    main.o(.text.main) refers to vga.o(.text.VGAPutChar) for VGAPutChar
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    main.o(.data..L_MergedGlobals) refers to main.o(.bss.vgaScreenBuff) for vgaScreenBuff
    main.o(.data..L_MergedGlobals) refers to main.o(.bss.vgaScreenBuff2) for vgaScreenBuff2
    drivers.o(.text.startup) refers to system_stm32f4xx.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    drivers.o(.text.startup) refers to system_stm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    drivers.o(.ARM.exidx.text.startup) refers to drivers.o(.text.startup) for [Anonymous Symbol]
    drivers.o(.text.initClock) refers to system_stm32f4xx.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    drivers.o(.ARM.exidx.text.initClock) refers to drivers.o(.text.initClock) for [Anonymous Symbol]
    drivers.o(.text.initUart2) refers to system_stm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    drivers.o(.ARM.exidx.text.initUart2) refers to drivers.o(.text.initUart2) for [Anonymous Symbol]
    drivers.o(.ARM.exidx.text.initSPI2) refers to drivers.o(.text.initSPI2) for [Anonymous Symbol]
    drivers.o(.ARM.exidx.text.initVSYNC) refers to drivers.o(.text.initVSYNC) for [Anonymous Symbol]
    drivers.o(.ARM.exidx.text.initHSYNC) refers to drivers.o(.text.initHSYNC) for [Anonymous Symbol]
    vga.o(.text.charToVga) refers to vga.o(.data.vgaChar) for vgaChar
    vga.o(.ARM.exidx.text.charToVga) refers to vga.o(.text.charToVga) for [Anonymous Symbol]
    vga.o(.text.VGACreateFrame) refers to rt_memclr.o(.text) for __aeabi_memclr
    vga.o(.text.VGACreateFrame) refers to vga.o(.text.VGADrawRect) for VGADrawRect
    vga.o(.ARM.exidx.text.VGACreateFrame) refers to vga.o(.text.VGACreateFrame) for [Anonymous Symbol]
    vga.o(.ARM.exidx.text.VGADrawRect) refers to vga.o(.text.VGADrawRect) for [Anonymous Symbol]
    vga.o(.ARM.exidx.text.VGADrawCircle) refers to vga.o(.text.VGADrawCircle) for [Anonymous Symbol]
    vga.o(.text.VGAPutChar) refers to vga.o(.data.vgaChar) for vgaChar
    vga.o(.ARM.exidx.text.VGAPutChar) refers to vga.o(.text.VGAPutChar) for [Anonymous Symbol]
    vga.o(.data.vgaChar) refers to vga.o(.bss.vgaChar_space) for vgaChar_space
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_exclamation) for vgaChar_exclamation
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_appostrophe) for vgaChar_appostrophe
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_hash) for vgaChar_hash
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_dollar) for vgaChar_dollar
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_purcent) for vgaChar_purcent
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_eperlu) for vgaChar_eperlu
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_crochet) for vgaChar_crochet
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_par1) for vgaChar_par1
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_par2) for vgaChar_par2
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_asterix) for vgaChar_asterix
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_plus) for vgaChar_plus
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_colon) for vgaChar_colon
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_minus) for vgaChar_minus
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_dot) for vgaChar_dot
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_slash) for vgaChar_slash
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_0) for vgaChar_0
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_1) for vgaChar_1
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_2) for vgaChar_2
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_3) for vgaChar_3
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_4) for vgaChar_4
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_5) for vgaChar_5
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_6) for vgaChar_6
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_7) for vgaChar_7
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_8) for vgaChar_8
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_9) for vgaChar_9
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_twoDots) for vgaChar_twoDots
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_semicolon) for vgaChar_semicolon
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_less) for vgaChar_less
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_equal) for vgaChar_equal
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_more) for vgaChar_more
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_question) for vgaChar_question
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_arobas) for vgaChar_arobas
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_A) for vgaChar_A
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_B) for vgaChar_B
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_C) for vgaChar_C
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_D) for vgaChar_D
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_E) for vgaChar_E
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_F) for vgaChar_F
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_G) for vgaChar_G
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_H) for vgaChar_H
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_I) for vgaChar_I
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_J) for vgaChar_J
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_K) for vgaChar_K
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_L) for vgaChar_L
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_M) for vgaChar_M
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_N) for vgaChar_N
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_O) for vgaChar_O
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_P) for vgaChar_P
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_Q) for vgaChar_Q
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_R) for vgaChar_R
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_S) for vgaChar_S
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_T) for vgaChar_T
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_U) for vgaChar_U
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_V) for vgaChar_V
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_W) for vgaChar_W
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_X) for vgaChar_X
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_Y) for vgaChar_Y
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_Z) for vgaChar_Z
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_sqrt1) for vgaChar_sqrt1
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_backslash) for vgaChar_backslash
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_sqrt2) for vgaChar_sqrt2
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_circonflexe) for vgaChar_circonflexe
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_underscore) for vgaChar_underscore
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_a) for vgaChar_a
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_b) for vgaChar_b
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_c) for vgaChar_c
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_d) for vgaChar_d
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_e) for vgaChar_e
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_f) for vgaChar_f
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_g) for vgaChar_g
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_h) for vgaChar_h
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_i) for vgaChar_i
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_j) for vgaChar_j
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_k) for vgaChar_k
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_l) for vgaChar_l
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_m) for vgaChar_m
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_n) for vgaChar_n
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_o) for vgaChar_o
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_p) for vgaChar_p
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_q) for vgaChar_q
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_r) for vgaChar_r
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_s) for vgaChar_s
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_t) for vgaChar_t
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_u) for vgaChar_u
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_v) for vgaChar_v
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_w) for vgaChar_w
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_x) for vgaChar_x
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_y) for vgaChar_y
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_z) for vgaChar_z
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_accolade1) for vgaChar_accolade1
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_bar) for vgaChar_bar
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_accolade2) for vgaChar_accolade2
    vga.o(.data.vgaChar) refers to vga.o(.data.vgaChar_neg) for vgaChar_neg
    comport.o(.text.printUart2) refers to strlen.o(.text) for strlen
    comport.o(.ARM.exidx.text.printUart2) refers to comport.o(.text.printUart2) for [Anonymous Symbol]
    rtx_lib.o(.text._platform_post_stackheap_init) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init) refers to rtx_lib.o(.text._platform_post_stackheap_init) for [Anonymous Symbol]
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active) for os_kernel_is_active.os_kernel_active
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_thread.o(.text.osThreadGetId) for osThreadGetId
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_lib.o(.bss.os.libspace) for .L_MergedGlobals
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_lib.o(.ARM.exidx.text.__user_perthread_libspace) refers to rtx_lib.o(.text.__user_perthread_libspace) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_initialize) refers to rtx_mutex.o(.text.osMutexNew) for osMutexNew
    rtx_lib.o(.text._mutex_initialize) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_lib.o(.ARM.exidx.text._mutex_initialize) refers to rtx_lib.o(.text._mutex_initialize) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_acquire) refers to rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active) for os_kernel_is_active.os_kernel_active
    rtx_lib.o(.text._mutex_acquire) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    rtx_lib.o(.text._mutex_acquire) refers to rtx_mutex.o(.text.osMutexAcquire) for osMutexAcquire
    rtx_lib.o(.ARM.exidx.text._mutex_acquire) refers to rtx_lib.o(.text._mutex_acquire) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_release) refers to rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active) for os_kernel_is_active.os_kernel_active
    rtx_lib.o(.text._mutex_release) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    rtx_lib.o(.text._mutex_release) refers to rtx_mutex.o(.text.osMutexRelease) for osMutexRelease
    rtx_lib.o(.ARM.exidx.text._mutex_release) refers to rtx_lib.o(.text._mutex_release) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_free) refers to rtx_mutex.o(.text.osMutexDelete) for osMutexDelete
    rtx_lib.o(.ARM.exidx.text._mutex_free) refers to rtx_lib.o(.text._mutex_free) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.idle.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.timer.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerSetup) for osRtxTimerSetup
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata.irqRtxLibRef) refers to irq_armv7m.o(.rodata) for irqRtxLib
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    startup_stm32f446xx.o(STACK) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f446xx.o(HEAP) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f446xx.o(RESET) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f446xx.o(RESET) refers to startup_stm32f446xx.o(STACK) for __initial_sp
    startup_stm32f446xx.o(RESET) refers to startup_stm32f446xx.o(.text) for Reset_Handler
    startup_stm32f446xx.o(RESET) refers to irq_armv7m.o(.text) for SVC_Handler
    startup_stm32f446xx.o(RESET) refers to main.o(.text.TIM2_IRQHandler) for TIM2_IRQHandler
    startup_stm32f446xx.o(RESET) refers to main.o(.text.TIM3_IRQHandler) for TIM3_IRQHandler
    startup_stm32f446xx.o(RESET) refers to main.o(.text.USART2_IRQHandler) for USART2_IRQHandler
    startup_stm32f446xx.o(.text) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f446xx.o(.text) refers to system_stm32f4xx.o(.text.SystemInit) for SystemInit
    startup_stm32f446xx.o(.text) refers to __main.o(!!!main) for __main
    startup_stm32f446xx.o(.text) refers to startup_stm32f446xx.o(HEAP) for Heap_Mem
    startup_stm32f446xx.o(.text) refers to startup_stm32f446xx.o(STACK) for Stack_Mem
    system_stm32f4xx.o(.ARM.exidx.text.SystemInit) refers to system_stm32f4xx.o(.text.SystemInit) for [Anonymous Symbol]
    system_stm32f4xx.o(.text.SystemCoreClockUpdate) refers to system_stm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    system_stm32f4xx.o(.text.SystemCoreClockUpdate) refers to system_stm32f4xx.o(.rodata.AHBPrescTable) for AHBPrescTable
    system_stm32f4xx.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_stm32f4xx.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_armv7m.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.GetKernelSleepTime) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime) refers to rtx_kernel.o(.text.GetKernelSleepTime) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.OUTLINED_FUNCTION_0) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRoot) for osRtxThreadListRoot
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for osRtxMutexOwnerRestore
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRoot) refers to rtx_thread.o(.text.osRtxThreadListRoot) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rt_memclr_w.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadDestroy) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for osRtxMessageQueueTimerSetup
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerSetup) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRestore) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rt_memclr_w.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_armv7m.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_armv7m.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    irq_armv7m.o(.ARM.exidx) refers to irq_armv7m.o(.text) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to system_stm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_stm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rt_memcpy_v6.o(.text) refers to rt_memcpy_w.o(.text) for __aeabi_memcpy4
    rt_memclr.o(.text) refers to rt_memclr_w.o(.text) for _memset_w
    __main.o(!!!main) refers to __rtentry.o(.ARM.Collect$$rtentry$$00000000) for __rt_entry
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for __rt_entry_li
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for __rt_entry_main
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000C) for __rt_entry_postli_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for __rt_entry_postsh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000002) for __rt_entry_presh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for __rt_entry_sh
    __rtentry2.o(.ARM.Collect$$rtentry$$00000008) refers to rtx_lib.o(.text._platform_post_stackheap_init) for _platform_post_stackheap_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) refers to libinit.o(.ARM.Collect$$libinit$$00000000) for __rt_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) refers to boardinit3.o(.text) for _platform_post_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to main.o(.text.main) for main
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to exit.o(.text) for exit
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000001) for .ARM.Collect$$rtentry$$00000001
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for .ARM.Collect$$rtentry$$00000008
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for .ARM.Collect$$rtentry$$0000000A
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) for .ARM.Collect$$rtentry$$0000000B
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for .ARM.Collect$$rtentry$$0000000D
    __rtentry4.o(.ARM.Collect$$rtentry$$00000004) refers to sys_stackheap_outer.o(.text) for __user_setup_stackheap
    __rtentry4.o(.ARM.exidx) refers to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for .ARM.Collect$$rtentry$$00000004
    sys_stackheap_outer.o(.text) refers to libspace.o(.text) for __user_perproc_libspace
    sys_stackheap_outer.o(.text) refers to startup_stm32f446xx.o(.text) for __user_initial_stackheap
    exit.o(.text) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for __rt_exit
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002E) for __rt_lib_init_alloca_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002C) for __rt_lib_init_argv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001B) for __rt_lib_init_atexit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000021) for __rt_lib_init_clock_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000032) for __rt_lib_init_cpp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000030) for __rt_lib_init_exceptions_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000001) for __rt_lib_init_fp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001F) for __rt_lib_init_fp_trap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000023) for __rt_lib_init_getenv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000A) for __rt_lib_init_heap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000011) for __rt_lib_init_lc_collate_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000013) for __rt_lib_init_lc_ctype_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000015) for __rt_lib_init_lc_monetary_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000017) for __rt_lib_init_lc_numeric_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000019) for __rt_lib_init_lc_time_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000004) for __rt_lib_init_preinit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000E) for __rt_lib_init_rand_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000033) for __rt_lib_init_return
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001D) for __rt_lib_init_signal_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000025) for __rt_lib_init_stdio_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000C) for __rt_lib_init_user_alloc_1
    libspace.o(.text) refers to libspace.o(.bss) for __libspace_start
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for .ARM.Collect$$rtexit$$00000000
    libinit2.o(.ARM.Collect$$libinit$$00000001) refers to fpinit.o(x$fpl$fpinit) for _fp_init
    libinit2.o(.ARM.Collect$$libinit$$00000010) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000012) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000014) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000016) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000018) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000026) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    libinit2.o(.ARM.Collect$$libinit$$00000027) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    rtexit2.o(.ARM.Collect$$rtexit$$00000003) refers to libshutdown.o(.ARM.Collect$$libshutdown$$00000000) for __rt_lib_shutdown
    rtexit2.o(.ARM.Collect$$rtexit$$00000004) refers to sys_exit.o(.text) for _sys_exit
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000001) for .ARM.Collect$$rtexit$$00000001
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for .ARM.Collect$$rtexit$$00000003
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for .ARM.Collect$$rtexit$$00000004
    argv_veneer.o(.emb_text) refers to no_argv.o(.text) for __ARM_get_argv
    sys_exit.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_exit_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    _get_argv_nomalloc.o(.text) refers (Special) to hrguard.o(.text) for __heap_region$guard
    _get_argv_nomalloc.o(.text) refers to defsig_rtmem_outer.o(.text) for __rt_SIGRTMEM
    _get_argv_nomalloc.o(.text) refers to sys_command.o(.text) for _sys_command_string
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000002) for __rt_lib_shutdown_cpp_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000007) for __rt_lib_shutdown_fp_trap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F) for __rt_lib_shutdown_heap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000010) for __rt_lib_shutdown_return
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A) for __rt_lib_shutdown_signal_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000004) for __rt_lib_shutdown_stdio_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C) for __rt_lib_shutdown_user_alloc_1
    sys_command.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_command_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig_rtmem_outer.o(.text) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_rtmem_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_rtmem_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    rt_raise.o(.text) refers to __raise.o(.text) for __raise
    rt_raise.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_exit.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_rtmem_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    __raise.o(.text) refers to defsig.o(CL$$defsig) for __default_signal_handler
    defsig_general.o(.text) refers to sys_wrch.o(.text) for _ttywrch
    sys_wrch.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_wrch_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig.o(CL$$defsig) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_abrt_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_fpe_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtred_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_stak_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_pvfn_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_cppl_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_segv_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_other.o(.text) refers to defsig_general.o(.text) for __default_signal_display


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.ARM.exidx.text.TIM2_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.TIM3_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.USART2_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing drivers.o(.text), (0 bytes).
    Removing drivers.o(.ARM.exidx.text.startup), (8 bytes).
    Removing drivers.o(.text.initClock), (172 bytes).
    Removing drivers.o(.ARM.exidx.text.initClock), (8 bytes).
    Removing drivers.o(.text.initUart2), (116 bytes).
    Removing drivers.o(.ARM.exidx.text.initUart2), (8 bytes).
    Removing drivers.o(.text.initSPI2), (174 bytes).
    Removing drivers.o(.ARM.exidx.text.initSPI2), (8 bytes).
    Removing drivers.o(.text.initVSYNC), (222 bytes).
    Removing drivers.o(.ARM.exidx.text.initVSYNC), (8 bytes).
    Removing drivers.o(.text.initHSYNC), (226 bytes).
    Removing drivers.o(.ARM.exidx.text.initHSYNC), (8 bytes).
    Removing vga.o(.text), (0 bytes).
    Removing vga.o(.text.charToVga), (20 bytes).
    Removing vga.o(.ARM.exidx.text.charToVga), (8 bytes).
    Removing vga.o(.ARM.exidx.text.VGACreateFrame), (8 bytes).
    Removing vga.o(.ARM.exidx.text.VGADrawRect), (8 bytes).
    Removing vga.o(.ARM.exidx.text.VGADrawCircle), (8 bytes).
    Removing vga.o(.ARM.exidx.text.VGAPutChar), (8 bytes).
    Removing comport.o(.text), (0 bytes).
    Removing comport.o(.text.printUart2), (298 bytes).
    Removing comport.o(.ARM.exidx.text.printUart2), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init), (8 bytes).
    Removing rtx_lib.o(.text.__user_perthread_libspace), (160 bytes).
    Removing rtx_lib.o(.ARM.exidx.text.__user_perthread_libspace), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_initialize), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_acquire), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_release), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_free), (8 bytes).
    Removing rtx_lib.o(.rodata.irqRtxLibRef), (4 bytes).
    Removing rtx_lib.o(.bss.os.libspace), (496 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.text.osRtxIdleThread), (2 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing system_stm32f4xx.o(.text), (0 bytes).
    Removing system_stm32f4xx.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing system_stm32f4xx.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing system_stm32f4xx.o(.rodata.APBPrescTable), (8 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelStart), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (4 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelStart), (136 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (64 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.GetKernelSleepTime), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (124 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_kernel.o(.text.OUTLINED_FUNCTION_1), (6 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRoot), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadStartup), (60 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadNew), (492 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadNew), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSetPriority), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadYield), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.text.osThreadExit), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadPostProcess), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.text.ThreadFlagsCheck), (100 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (60 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSetPriority), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadYield), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (116 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (44 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadFree), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (84 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadExit), (76 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadJoinWakeup), (30 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadDestroy), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (102 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (76 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_0), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_1), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_2), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_4), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4), (8 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (120 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (16 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexOwnerRelease), (72 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (16 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (20 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing irq_armv7m.o(.rodata), (1 bytes).
    Removing irq_armv7m.o(.ARM.exidx), (24 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (104 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (20 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (312 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (92 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (100 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (108 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueNew), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (20 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (168 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (112 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.text.OS_Tick_Setup), (64 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Enable), (44 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (44 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetIRQn), (6 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing os_systick.o(.bss.os), (1 bytes).

390 unused section(s) (total 10502 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit1.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit3.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardshut.o ABSOLUTE
    ../clib/angel/dczerorl2.s                0x00000000   Number         0  __dczerorl2.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_zi.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry2.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry4.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit2.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_raise.o ABSOLUTE
    ../clib/angel/scatter.s                  0x00000000   Number         0  __scatter.o ABSOLUTE
    ../clib/angel/startup.s                  0x00000000   Number         0  __main.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  sys_stackheap_outer.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  libspace.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  use_no_semi.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  indicate_semi.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch_hlt.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  _get_argv_nomalloc.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  no_argv.o ABSOLUTE
    ../clib/heapalloc.c                      0x00000000   Number         0  hrguard.o ABSOLUTE
    ../clib/heapaux.c                        0x00000000   Number         0  heapauxi.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit2.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown2.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_v6.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr_w.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_w.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_exit.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  __raise.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_general.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_abrt_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtred_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_stak_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_pvfn_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_cppl_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_segv_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_other.o ABSOLUTE
    ../clib/signal.s                         0x00000000   Number         0  defsig.o ABSOLUTE
    ../clib/stdlib.c                         0x00000000   Number         0  exit.o ABSOLUTE
    ../clib/string.c                         0x00000000   Number         0  strlen.o ABSOLUTE
    ../fplib/fpinit.s                        0x00000000   Number         0  fpinit.o ABSOLUTE
    RTE/Device/STM32F446RETx/startup_stm32f446xx.s 0x00000000   Number         0  startup_stm32f446xx.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    comport.c                                0x00000000   Number         0  comport.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    drivers.c                                0x00000000   Number         0  drivers.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    system_stm32f4xx.c                       0x00000000   Number         0  system_stm32f4xx.o ABSOLUTE
    vga.c                                    0x00000000   Number         0  vga.o ABSOLUTE
    FPU_USED                                 0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    osRtxErrorStackOverflow                  0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    I_T_RUN_OFS                              0x00000014   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SF_OFS                               0x00000022   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SP_OFS                               0x00000038   Number         0  irq_armv7m.o ABSOLUTE
    RESET                                    0x08000000   Section      452  startup_stm32f446xx.o(RESET)
    !!!main                                  0x080001c4   Section        8  __main.o(!!!main)
    !!!scatter                               0x080001cc   Section       52  __scatter.o(!!!scatter)
    !!dczerorl2                              0x08000200   Section       90  __dczerorl2.o(!!dczerorl2)
    !!handler_zi                             0x0800025c   Section       28  __scatter_zi.o(!!handler_zi)
    .ARM.Collect$$libinit$$00000000          0x08000278   Section        2  libinit.o(.ARM.Collect$$libinit$$00000000)
    .ARM.Collect$$libinit$$00000001          0x0800027a   Section        4  libinit2.o(.ARM.Collect$$libinit$$00000001)
    .ARM.Collect$$libinit$$00000004          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    .ARM.Collect$$libinit$$0000000A          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000A)
    .ARM.Collect$$libinit$$0000000C          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    .ARM.Collect$$libinit$$0000000E          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    .ARM.Collect$$libinit$$00000011          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000011)
    .ARM.Collect$$libinit$$00000013          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    .ARM.Collect$$libinit$$00000015          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    .ARM.Collect$$libinit$$00000017          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    .ARM.Collect$$libinit$$00000019          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    .ARM.Collect$$libinit$$0000001B          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    .ARM.Collect$$libinit$$0000001D          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    .ARM.Collect$$libinit$$0000001F          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    .ARM.Collect$$libinit$$00000021          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    .ARM.Collect$$libinit$$00000023          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    .ARM.Collect$$libinit$$00000025          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    .ARM.Collect$$libinit$$0000002C          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002C)
    .ARM.Collect$$libinit$$0000002E          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    .ARM.Collect$$libinit$$00000030          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    .ARM.Collect$$libinit$$00000032          0x0800027e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    .ARM.Collect$$libinit$$00000033          0x0800027e   Section        2  libinit2.o(.ARM.Collect$$libinit$$00000033)
    .ARM.Collect$$libshutdown$$00000000      0x08000280   Section        2  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    .ARM.Collect$$libshutdown$$00000002      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    .ARM.Collect$$libshutdown$$00000004      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    .ARM.Collect$$libshutdown$$00000007      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    .ARM.Collect$$libshutdown$$0000000A      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    .ARM.Collect$$libshutdown$$0000000C      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    .ARM.Collect$$libshutdown$$0000000F      0x08000282   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    .ARM.Collect$$libshutdown$$00000010      0x08000282   Section        2  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    .ARM.Collect$$rtentry$$00000000          0x08000284   Section        0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    .ARM.Collect$$rtentry$$00000002          0x08000284   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    .ARM.Collect$$rtentry$$00000004          0x08000284   Section        6  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    .ARM.Collect$$rtentry$$00000008          0x0800028a   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    .ARM.Collect$$rtentry$$0000000A          0x08000292   Section        4  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    .ARM.Collect$$rtentry$$0000000C          0x08000296   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    .ARM.Collect$$rtentry$$0000000D          0x08000296   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    .ARM.Collect$$rtexit$$00000000           0x0800029e   Section        2  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    .ARM.Collect$$rtexit$$00000002           0x080002a0   Section        0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    .ARM.Collect$$rtexit$$00000003           0x080002a0   Section        4  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    .ARM.Collect$$rtexit$$00000004           0x080002a4   Section        6  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    $v0                                      0x080002ac   Number         0  startup_stm32f446xx.o(.text)
    .text                                    0x080002ac   Section       64  startup_stm32f446xx.o(.text)
    [Anonymous Symbol]                       0x080002ec   Section        0  irq_armv7m.o(.text)
    SVC_Context                              0x08000314   Number         0  irq_armv7m.o(.text)
    SVC_FP_LazyState                         0x08000324   Number         0  irq_armv7m.o(.text)
    SVC_ContextSave                          0x08000336   Number         0  irq_armv7m.o(.text)
    SVC_ContextRestore                       0x0800034c   Number         0  irq_armv7m.o(.text)
    SVC_Exit                                 0x08000368   Number         0  irq_armv7m.o(.text)
    SVC_User                                 0x0800036a   Number         0  irq_armv7m.o(.text)
    .text                                    0x080003b4   Section      138  rt_memcpy_v6.o(.text)
    .text                                    0x0800043e   Section       68  rt_memclr.o(.text)
    .text                                    0x08000482   Section       78  rt_memclr_w.o(.text)
    .text                                    0x080004d0   Section        0  heapauxi.o(.text)
    .text                                    0x080004d6   Section      100  rt_memcpy_w.o(.text)
    .text                                    0x0800053a   Section       74  sys_stackheap_outer.o(.text)
    .text                                    0x08000584   Section        0  exit.o(.text)
    .text                                    0x08000598   Section        8  libspace.o(.text)
    .text                                    0x080005a0   Section        0  sys_exit.o(.text)
    .text                                    0x080005ac   Section        2  use_no_semi.o(.text)
    MessageQueueGet                          0x080005af   Thumb Code    64  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x080005ae   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    .text                                    0x080005ae   Section        0  indicate_semi.o(.text)
    MessageQueuePut                          0x080005ef   Thumb Code    88  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x080005ee   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    MessageQueueRemove                       0x08000647   Thumb Code    28  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x08000646   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x08000664   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    __arm_cp.3_0                             0x0800066c   Number         4  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OUTLINED_FUNCTION_0                      0x08000671   Thumb Code    12  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x08000670   Section        0  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_0                      0x0800067d   Thumb Code    12  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x0800067c   Section        0  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x08000688   Section        0  system_stm32f4xx.o(.text.SystemCoreClockUpdate)
    [Anonymous Symbol]                       0x08000704   Section        0  system_stm32f4xx.o(.text.SystemInit)
    [Anonymous Symbol]                       0x08000720   Section        0  main.o(.text.TIM2_IRQHandler)
    [Anonymous Symbol]                       0x080007ac   Section        0  main.o(.text.TIM3_IRQHandler)
    TimerInsert                              0x08000815   Thumb Code    68  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x08000814   Section        0  rtx_timer.o(.text.TimerInsert)
    __arm_cp.9_0                             0x08000858   Number         4  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x0800085c   Section        0  main.o(.text.USART2_IRQHandler)
    [Anonymous Symbol]                       0x080008b4   Section        0  vga.o(.text.VGACreateFrame)
    [Anonymous Symbol]                       0x080008e4   Section        0  vga.o(.text.VGADrawCircle)
    [Anonymous Symbol]                       0x08000ad4   Section        0  vga.o(.text.VGADrawRect)
    [Anonymous Symbol]                       0x08000db8   Section        0  vga.o(.text.VGAPutChar)
    __tagsym$$used.1                         0x08000f68   Number         0  rtx_lib.o(.text._mutex_acquire)
    [Anonymous Symbol]                       0x08000f68   Section        0  rtx_lib.o(.text._mutex_acquire)
    __tagsym$$used.3                         0x08000fa0   Number         0  rtx_lib.o(.text._mutex_free)
    [Anonymous Symbol]                       0x08000fa0   Section        0  rtx_lib.o(.text._mutex_free)
    __tagsym$$used.0                         0x08000fa8   Number         0  rtx_lib.o(.text._mutex_initialize)
    [Anonymous Symbol]                       0x08000fa8   Section        0  rtx_lib.o(.text._mutex_initialize)
    __tagsym$$used.2                         0x08000fc8   Number         0  rtx_lib.o(.text._mutex_release)
    [Anonymous Symbol]                       0x08000fc8   Section        0  rtx_lib.o(.text._mutex_release)
    [Anonymous Symbol]                       0x08000ffc   Section        0  rtx_lib.o(.text._platform_post_stackheap_init)
    [Anonymous Symbol]                       0x08001000   Section        0  main.o(.text.main)
    [Anonymous Symbol]                       0x08001160   Section        0  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_0                             0x08001188   Number         4  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_1                             0x0800118c   Number         4  rtx_kernel.o(.text.osKernelGetState)
    [Anonymous Symbol]                       0x08001190   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.2_0                             0x080011b8   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x080011bc   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.5_0                             0x08001228   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x0800122c   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.4_0                             0x080012a8   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x080012ac   Section        0  rtx_mutex.o(.text.osMutexAcquire)
    __arm_cp.4_0                             0x080012cc   Number         4  rtx_mutex.o(.text.osMutexAcquire)
    [Anonymous Symbol]                       0x080012d0   Section        0  rtx_mutex.o(.text.osMutexDelete)
    __arm_cp.7_0                             0x080012f0   Number         4  rtx_mutex.o(.text.osMutexDelete)
    [Anonymous Symbol]                       0x080012f4   Section        0  rtx_mutex.o(.text.osMutexNew)
    __arm_cp.2_0                             0x08001314   Number         4  rtx_mutex.o(.text.osMutexNew)
    [Anonymous Symbol]                       0x08001318   Section        0  rtx_mutex.o(.text.osMutexRelease)
    __arm_cp.5_0                             0x08001338   Number         4  rtx_mutex.o(.text.osMutexRelease)
    [Anonymous Symbol]                       0x0800133c   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    [Anonymous Symbol]                       0x0800133e   Section        0  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    [Anonymous Symbol]                       0x08001342   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    [Anonymous Symbol]                       0x08001344   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x080013b0   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x080013f2   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x08001428   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x08001462   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x080014ac   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueuePostProcess             0x080014e5   Thumb Code   170  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x080014e4   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x08001590   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    __arm_cp.0_0                             0x080015b0   Number         4  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    [Anonymous Symbol]                       0x080015b4   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    [Anonymous Symbol]                       0x080015f8   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x08001680   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x080016ec   Number         4  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadBlock                         0x080016f1   Thumb Code    52  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x080016f0   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x08001725   Thumb Code   124  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x08001724   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayRemove                   0x080017a1   Thumb Code    60  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x080017a0   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x080017dc   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x08001824   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    [Anonymous Symbol]                       0x08001874   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x08001886   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x080018b2   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListRoot                      0x080018c7   Thumb Code    12  rtx_thread.o(.text.osRtxThreadListRoot)
    [Anonymous Symbol]                       0x080018c6   Section        0  rtx_thread.o(.text.osRtxThreadListRoot)
    [Anonymous Symbol]                       0x080018d2   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    [Anonymous Symbol]                       0x080018f8   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x08001908   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x0800191c   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x08001928   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.13_0                            0x08001960   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x08001964   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x08001994   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x08001a08   Section        0  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_0                             0x08001a20   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_1                             0x08001a24   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    [Anonymous Symbol]                       0x08001a28   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x08001a49   Thumb Code   108  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x08001a48   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x08001ab4   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x08001ab8   Section        0  drivers.o(.text.startup)
    svcRtxKernelGetState                     0x08001e25   Thumb Code     8  rtx_kernel.o(.text.svcRtxKernelGetState)
    [Anonymous Symbol]                       0x08001e24   Section        0  rtx_kernel.o(.text.svcRtxKernelGetState)
    __arm_cp.6_0                             0x08001e2c   Number         4  rtx_kernel.o(.text.svcRtxKernelGetState)
    svcRtxKernelInitialize                   0x08001e31   Thumb Code   244  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x08001e30   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_1                            0x08001f24   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_2                            0x08001f28   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxMessageQueueGet                    0x08001f2d   Thumb Code   212  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x08001f2c   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x08002001   Thumb Code   272  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x08002000   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.1_1                             0x08002110   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x08002115   Thumb Code   176  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x08002114   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    __arm_cp.20_0                            0x080021c4   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxMutexAcquire                       0x080021c9   Thumb Code   140  rtx_mutex.o(.text.svcRtxMutexAcquire)
    [Anonymous Symbol]                       0x080021c8   Section        0  rtx_mutex.o(.text.svcRtxMutexAcquire)
    svcRtxMutexDelete                        0x08002255   Thumb Code   172  rtx_mutex.o(.text.svcRtxMutexDelete)
    [Anonymous Symbol]                       0x08002254   Section        0  rtx_mutex.o(.text.svcRtxMutexDelete)
    svcRtxMutexNew                           0x08002301   Thumb Code   100  rtx_mutex.o(.text.svcRtxMutexNew)
    [Anonymous Symbol]                       0x08002300   Section        0  rtx_mutex.o(.text.svcRtxMutexNew)
    __arm_cp.8_0                             0x08002364   Number         4  rtx_mutex.o(.text.svcRtxMutexNew)
    svcRtxMutexRelease                       0x08002369   Thumb Code   176  rtx_mutex.o(.text.svcRtxMutexRelease)
    [Anonymous Symbol]                       0x08002368   Section        0  rtx_mutex.o(.text.svcRtxMutexRelease)
    __arm_cp.11_0                            0x08002418   Number         4  rtx_mutex.o(.text.svcRtxMutexRelease)
    $v0                                      0x0800241c   Number         0  fpinit.o(x$fpl$fpinit)
    x$fpl$fpinit                             0x0800241c   Section       26  fpinit.o(x$fpl$fpinit)
    __tagsym$$used.4                         0x08002438   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.5                         0x080024a8   Number         0  rtx_lib.o(.rodata)
    os_idle_thread_attr                      0x080024f4   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x080024f4   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x08002518   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x08002518   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x08002530   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x08002530   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x08002554   Section        0  rtx_kernel.o(.rodata.str1.4)
    .L_MergedGlobals                         0x20000000   Data          28  main.o(.data..L_MergedGlobals)
    [Anonymous Symbol]                       0x20000000   Section        0  main.o(.data..L_MergedGlobals)
    main.x                                   0x2000000c   Data           4  main.o(.data..L_MergedGlobals)
    main.y                                   0x20000010   Data           4  main.o(.data..L_MergedGlobals)
    main.vX                                  0x20000014   Data           4  main.o(.data..L_MergedGlobals)
    main.vY                                  0x20000018   Data           4  main.o(.data..L_MergedGlobals)
    .bss                                     0x20000528   Section       96  libspace.o(.bss)
    .L_MergedGlobals.1                       0x20000588   Data          12  main.o(.bss..L_MergedGlobals.1)
    [Anonymous Symbol]                       0x20000588   Section        0  main.o(.bss..L_MergedGlobals.1)
    TIM3_IRQHandler.psc                      0x2000058c   Data           4  main.o(.bss..L_MergedGlobals.1)
    USART2_IRQHandler.len                    0x20000590   Data           4  main.o(.bss..L_MergedGlobals.1)
    TIM2_IRQHandler.line                     0x20000594   Data           4  main.o(.bss.TIM2_IRQHandler.line)
    [Anonymous Symbol]                       0x20000594   Section        0  main.o(.bss.TIM2_IRQHandler.line)
    os_isr_queue                             0x20000598   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x20000598   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x200005d8   Data       32768  rtx_lib.o(.bss.os)
    os_timer_mq_cb                           0x200085d8   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x200085d8   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x2000860c   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x2000860c   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x2000865c   Data          68  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x2000865c   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x200086a0   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x200086e8   Data         512  rtx_lib.o(.bss.os.thread.idle.stack)
    [Anonymous Symbol]                       0x200086e8   Section        0  rtx_lib.o(.bss.os.thread.idle.stack)
    os_timer_thread_stack                    0x200088e8   Data         512  rtx_lib.o(.bss.os.thread.timer.stack)
    [Anonymous Symbol]                       0x200088e8   Section        0  rtx_lib.o(.bss.os.thread.timer.stack)
    os_kernel_is_active.os_kernel_active     0x20008ae8   Data           1  rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active)
    [Anonymous Symbol]                       0x20008ae8   Section        0  rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active)
    Heap_Mem                                 0x2000fbf8   Data         512  startup_stm32f446xx.o(HEAP)
    HEAP                                     0x2000fbf8   Section      512  startup_stm32f446xx.o(HEAP)
    Stack_Mem                                0x2000fdf8   Data        1024  startup_stm32f446xx.o(STACK)
    STACK                                    0x2000fdf8   Section     1024  startup_stm32f446xx.o(STACK)
    __initial_sp                             0x200101f8   Data           0  startup_stm32f446xx.o(STACK)
    FPCCR                                    0xe000ef34   Number         0  irq_armv7m.o ABSOLUTE

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv4$E$P$D$K$B$S$7EM$VFPi3$EXTD16$VFPS$VFMA$PE$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OTIME$ROPI$EBA8$UX$STANDARDLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __ARM_exceptions_init                     - Undefined Weak Reference
    __alloca_initialize                       - Undefined Weak Reference
    __arm_preinit_                            - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    __rt_locale                               - Undefined Weak Reference
    __sigvec_lookup                           - Undefined Weak Reference
    _atexit_init                              - Undefined Weak Reference
    _call_atexit_fns                          - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _fp_trap_init                             - Undefined Weak Reference
    _fp_trap_shutdown                         - Undefined Weak Reference
    _get_lc_collate                           - Undefined Weak Reference
    _get_lc_ctype                             - Undefined Weak Reference
    _get_lc_monetary                          - Undefined Weak Reference
    _get_lc_numeric                           - Undefined Weak Reference
    _get_lc_time                              - Undefined Weak Reference
    _getenv_init                              - Undefined Weak Reference
    _handle_redirection                       - Undefined Weak Reference
    _init_alloc                               - Undefined Weak Reference
    _init_user_alloc                          - Undefined Weak Reference
    _initio                                   - Undefined Weak Reference
    _rand_init                                - Undefined Weak Reference
    _signal_finish                            - Undefined Weak Reference
    _signal_init                              - Undefined Weak Reference
    _terminate_alloc                          - Undefined Weak Reference
    _terminate_user_alloc                     - Undefined Weak Reference
    _terminateio                              - Undefined Weak Reference
    __Vectors_Size                           0x000001c4   Number         0  startup_stm32f446xx.o ABSOLUTE
    __Vectors                                0x08000000   Data           4  startup_stm32f446xx.o(RESET)
    __Vectors_End                            0x080001c4   Data           0  startup_stm32f446xx.o(RESET)
    __main                                   0x080001c5   Thumb Code     8  __main.o(!!!main)
    __scatterload                            0x080001cd   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_rt2                        0x080001cd   Thumb Code    44  __scatter.o(!!!scatter)
    __scatterload_rt2_thumb_only             0x080001cd   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_null                       0x080001db   Thumb Code     0  __scatter.o(!!!scatter)
    __decompress                             0x08000201   Thumb Code    90  __dczerorl2.o(!!dczerorl2)
    __decompress1                            0x08000201   Thumb Code     0  __dczerorl2.o(!!dczerorl2)
    __scatterload_zeroinit                   0x0800025d   Thumb Code    28  __scatter_zi.o(!!handler_zi)
    __rt_lib_init                            0x08000279   Thumb Code     0  libinit.o(.ARM.Collect$$libinit$$00000000)
    __rt_lib_init_fp_1                       0x0800027b   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000001)
    __rt_lib_init_alloca_1                   0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    __rt_lib_init_argv_1                     0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002C)
    __rt_lib_init_atexit_1                   0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    __rt_lib_init_clock_1                    0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    __rt_lib_init_cpp_1                      0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    __rt_lib_init_exceptions_1               0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    __rt_lib_init_fp_trap_1                  0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    __rt_lib_init_getenv_1                   0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    __rt_lib_init_heap_1                     0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000A)
    __rt_lib_init_lc_collate_1               0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000011)
    __rt_lib_init_lc_ctype_1                 0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    __rt_lib_init_lc_monetary_1              0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    __rt_lib_init_lc_numeric_1               0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    __rt_lib_init_lc_time_1                  0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    __rt_lib_init_preinit_1                  0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    __rt_lib_init_rand_1                     0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    __rt_lib_init_return                     0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000033)
    __rt_lib_init_signal_1                   0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    __rt_lib_init_stdio_1                    0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    __rt_lib_init_user_alloc_1               0x0800027f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    __rt_lib_shutdown                        0x08000281   Thumb Code     0  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    __rt_lib_shutdown_cpp_1                  0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    __rt_lib_shutdown_fp_trap_1              0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    __rt_lib_shutdown_heap_1                 0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    __rt_lib_shutdown_return                 0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    __rt_lib_shutdown_signal_1               0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    __rt_lib_shutdown_stdio_1                0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    __rt_lib_shutdown_user_alloc_1           0x08000283   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    __rt_entry                               0x08000285   Thumb Code     0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    __rt_entry_presh_1                       0x08000285   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    __rt_entry_sh                            0x08000285   Thumb Code     0  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    __rt_entry_postsh_1                      0x0800028b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    __rt_entry_li                            0x08000293   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    __rt_entry_main                          0x08000297   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    __rt_entry_postli_1                      0x08000297   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    __rt_exit                                0x0800029f   Thumb Code     0  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    __rt_exit_ls                             0x080002a1   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    __rt_exit_prels_1                        0x080002a1   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    __rt_exit_exit                           0x080002a5   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    Reset_Handler                            0x080002ad   Thumb Code     8  startup_stm32f446xx.o(.text)
    NMI_Handler                              0x080002b5   Thumb Code     2  startup_stm32f446xx.o(.text)
    HardFault_Handler                        0x080002b7   Thumb Code     2  startup_stm32f446xx.o(.text)
    MemManage_Handler                        0x080002b9   Thumb Code     2  startup_stm32f446xx.o(.text)
    BusFault_Handler                         0x080002bb   Thumb Code     2  startup_stm32f446xx.o(.text)
    UsageFault_Handler                       0x080002bd   Thumb Code     2  startup_stm32f446xx.o(.text)
    DebugMon_Handler                         0x080002c1   Thumb Code     2  startup_stm32f446xx.o(.text)
    ADC_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN1_RX0_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN1_RX1_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN1_SCE_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN1_TX_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN2_RX0_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN2_RX1_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN2_SCE_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CAN2_TX_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    CEC_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DCMI_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream0_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream1_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream2_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream3_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream4_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream5_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream6_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA1_Stream7_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream0_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream1_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream2_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream3_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream4_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream5_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream6_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    DMA2_Stream7_IRQHandler                  0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI0_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI15_10_IRQHandler                     0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI1_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI2_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI3_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI4_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    EXTI9_5_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    FLASH_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    FMC_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    FMPI2C1_ER_IRQHandler                    0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    FMPI2C1_EV_IRQHandler                    0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    FPU_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C1_ER_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C1_EV_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C2_ER_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C2_EV_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C3_ER_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    I2C3_EV_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_FS_IRQHandler                        0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_FS_WKUP_IRQHandler                   0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_HS_EP1_IN_IRQHandler                 0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_HS_EP1_OUT_IRQHandler                0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_HS_IRQHandler                        0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    OTG_HS_WKUP_IRQHandler                   0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    PVD_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    QUADSPI_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    RCC_IRQHandler                           0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    RTC_Alarm_IRQHandler                     0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    RTC_WKUP_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SAI1_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SAI2_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SDIO_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SPDIF_RX_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SPI1_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SPI2_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SPI3_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    SPI4_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TAMP_STAMP_IRQHandler                    0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM1_BRK_TIM9_IRQHandler                 0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM1_CC_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM1_TRG_COM_TIM11_IRQHandler            0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM1_UP_TIM10_IRQHandler                 0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM4_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM5_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM6_DAC_IRQHandler                      0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM7_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM8_BRK_TIM12_IRQHandler                0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM8_CC_IRQHandler                       0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM8_TRG_COM_TIM14_IRQHandler            0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    TIM8_UP_TIM13_IRQHandler                 0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    UART4_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    UART5_IRQHandler                         0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    USART1_IRQHandler                        0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    USART3_IRQHandler                        0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    USART6_IRQHandler                        0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    WWDG_IRQHandler                          0x080002c7   Thumb Code     0  startup_stm32f446xx.o(.text)
    __user_initial_stackheap                 0x080002c9   Thumb Code     0  startup_stm32f446xx.o(.text)
    SVC_Handler                              0x080002ed   Thumb Code   154  irq_armv7m.o(.text)
    PendSV_Handler                           0x08000387   Thumb Code    16  irq_armv7m.o(.text)
    SysTick_Handler                          0x08000397   Thumb Code    16  irq_armv7m.o(.text)
    __aeabi_memcpy                           0x080003b5   Thumb Code     0  rt_memcpy_v6.o(.text)
    __rt_memcpy                              0x080003b5   Thumb Code   138  rt_memcpy_v6.o(.text)
    _memcpy_lastbytes                        0x0800041b   Thumb Code     0  rt_memcpy_v6.o(.text)
    __aeabi_memclr                           0x0800043f   Thumb Code     0  rt_memclr.o(.text)
    __rt_memclr                              0x0800043f   Thumb Code     0  rt_memclr.o(.text)
    _memset                                  0x08000443   Thumb Code    64  rt_memclr.o(.text)
    __aeabi_memclr4                          0x08000483   Thumb Code     0  rt_memclr_w.o(.text)
    __aeabi_memclr8                          0x08000483   Thumb Code     0  rt_memclr_w.o(.text)
    __rt_memclr_w                            0x08000483   Thumb Code     0  rt_memclr_w.o(.text)
    _memset_w                                0x08000487   Thumb Code    74  rt_memclr_w.o(.text)
    __use_two_region_memory                  0x080004d1   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_escrow$2region                 0x080004d3   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_expand$2region                 0x080004d5   Thumb Code     2  heapauxi.o(.text)
    __aeabi_memcpy4                          0x080004d7   Thumb Code     0  rt_memcpy_w.o(.text)
    __aeabi_memcpy8                          0x080004d7   Thumb Code     0  rt_memcpy_w.o(.text)
    __rt_memcpy_w                            0x080004d7   Thumb Code   100  rt_memcpy_w.o(.text)
    _memcpy_lastbytes_aligned                0x0800051f   Thumb Code     0  rt_memcpy_w.o(.text)
    __user_setup_stackheap                   0x0800053b   Thumb Code    74  sys_stackheap_outer.o(.text)
    exit                                     0x08000585   Thumb Code    18  exit.o(.text)
    __user_libspace                          0x08000599   Thumb Code     8  libspace.o(.text)
    __user_perproc_libspace                  0x08000599   Thumb Code     0  libspace.o(.text)
    _sys_exit                                0x080005a1   Thumb Code     8  sys_exit.o(.text)
    __I$use$semihosting                      0x080005ad   Thumb Code     0  use_no_semi.o(.text)
    __use_no_semihosting_swi                 0x080005ad   Thumb Code     2  use_no_semi.o(.text)
    __semihosting_library_function           0x080005af   Thumb Code     0  indicate_semi.o(.text)
    OS_Tick_AcknowledgeIRQ                   0x08000665   Thumb Code     8  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    SystemCoreClockUpdate                    0x08000689   Thumb Code   124  system_stm32f4xx.o(.text.SystemCoreClockUpdate)
    SystemInit                               0x08000705   Thumb Code    26  system_stm32f4xx.o(.text.SystemInit)
    TIM2_IRQHandler                          0x08000721   Thumb Code   138  main.o(.text.TIM2_IRQHandler)
    TIM3_IRQHandler                          0x080007ad   Thumb Code   102  main.o(.text.TIM3_IRQHandler)
    USART2_IRQHandler                        0x0800085d   Thumb Code    88  main.o(.text.USART2_IRQHandler)
    VGACreateFrame                           0x080008b5   Thumb Code    46  vga.o(.text.VGACreateFrame)
    VGADrawCircle                            0x080008e5   Thumb Code   496  vga.o(.text.VGADrawCircle)
    VGADrawRect                              0x08000ad5   Thumb Code   738  vga.o(.text.VGADrawRect)
    VGAPutChar                               0x08000db9   Thumb Code   432  vga.o(.text.VGAPutChar)
    _mutex_acquire                           0x08000f69   Thumb Code    54  rtx_lib.o(.text._mutex_acquire)
    _mutex_free                              0x08000fa1   Thumb Code     6  rtx_lib.o(.text._mutex_free)
    _mutex_initialize                        0x08000fa9   Thumb Code    32  rtx_lib.o(.text._mutex_initialize)
    _mutex_release                           0x08000fc9   Thumb Code    50  rtx_lib.o(.text._mutex_release)
    _platform_post_stackheap_init            0x08000ffd   Thumb Code     4  rtx_lib.o(.text._platform_post_stackheap_init)
    main                                     0x08001001   Thumb Code   352  main.o(.text.main)
    osKernelGetState                         0x08001161   Thumb Code    40  rtx_kernel.o(.text.osKernelGetState)
    osKernelInitialize                       0x08001191   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osMessageQueueGet                        0x080011bd   Thumb Code   108  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueuePut                        0x0800122d   Thumb Code   124  rtx_msgqueue.o(.text.osMessageQueuePut)
    osMutexAcquire                           0x080012ad   Thumb Code    32  rtx_mutex.o(.text.osMutexAcquire)
    osMutexDelete                            0x080012d1   Thumb Code    32  rtx_mutex.o(.text.osMutexDelete)
    osMutexNew                               0x080012f5   Thumb Code    32  rtx_mutex.o(.text.osMutexNew)
    osMutexRelease                           0x08001319   Thumb Code    32  rtx_mutex.o(.text.osMutexRelease)
    osRtxErrorNotify                         0x0800133d   Thumb Code     2  rtx_config.o(.text.osRtxErrorNotify)
    osRtxKernelErrorNotify                   0x0800133f   Thumb Code     4  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    osRtxKernelPreInit                       0x08001343   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    osRtxMemoryAlloc                         0x08001345   Thumb Code   108  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x080013b1   Thumb Code    66  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x080013f3   Thumb Code    54  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x08001429   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x08001463   Thumb Code    74  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x080014ad   Thumb Code    56  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueueTimerSetup              0x08001591   Thumb Code    32  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    osRtxMutexOwnerRestore                   0x080015b5   Thumb Code    66  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    osRtxPendSV_Handler                      0x080015f9   Thumb Code   136  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x08001681   Thumb Code   108  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x080017dd   Thumb Code    72  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x08001825   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x08001875   Thumb Code    18  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x08001887   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x080018b3   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x080018d3   Thumb Code    38  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x080018f9   Thumb Code    16  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x08001909   Thumb Code    20  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadSwitch                        0x0800191d   Thumb Code    12  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x08001929   Thumb Code    56  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x08001965   Thumb Code    48  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x08001995   Thumb Code   116  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerSetup                          0x08001a09   Thumb Code    24  rtx_timer.o(.text.osRtxTimerSetup)
    osRtxTimerThread                         0x08001a29   Thumb Code    32  rtx_timer.o(.text.osRtxTimerThread)
    startup                                  0x08001ab9   Thumb Code   876  drivers.o(.text.startup)
    _fp_init                                 0x0800241d   Thumb Code    26  fpinit.o(x$fpl$fpinit)
    __fplib_config_fpu_vfp                   0x08002435   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    __fplib_config_pureend_doubles           0x08002435   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    osRtxConfig                              0x08002438   Data         112  rtx_lib.o(.rodata)
    os_cb_sections                           0x080024a8   Data          56  rtx_lib.o(.rodata)
    AHBPrescTable                            0x080024e0   Data          16  system_stm32f4xx.o(.rodata.AHBPrescTable)
    osRtxUserSVC                             0x080024f0   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    Region$$Table$$Base                      0x08002560   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x08002580   Number         0  anon$$obj.o(Region$$Table)
    vgaCurrentScreenBuff                     0x20000000   Data           4  main.o(.data..L_MergedGlobals)
    vgaNextScreenBuff                        0x20000004   Data           4  main.o(.data..L_MergedGlobals)
    vgaBuffNext                              0x20000008   Data           4  main.o(.data..L_MergedGlobals)
    SystemCoreClock                          0x2000001c   Data           4  system_stm32f4xx.o(.data.SystemCoreClock)
    osRtxInfo                                0x20000020   Data         164  rtx_kernel.o(.data.os)
    vgaChar                                  0x200000c4   Data         380  vga.o(.data.vgaChar)
    vgaChar_0                                0x20000240   Data           8  vga.o(.data.vgaChar_0)
    vgaChar_1                                0x20000248   Data           8  vga.o(.data.vgaChar_1)
    vgaChar_2                                0x20000250   Data           8  vga.o(.data.vgaChar_2)
    vgaChar_3                                0x20000258   Data           8  vga.o(.data.vgaChar_3)
    vgaChar_4                                0x20000260   Data           8  vga.o(.data.vgaChar_4)
    vgaChar_5                                0x20000268   Data           8  vga.o(.data.vgaChar_5)
    vgaChar_6                                0x20000270   Data           8  vga.o(.data.vgaChar_6)
    vgaChar_7                                0x20000278   Data           8  vga.o(.data.vgaChar_7)
    vgaChar_8                                0x20000280   Data           8  vga.o(.data.vgaChar_8)
    vgaChar_9                                0x20000288   Data           8  vga.o(.data.vgaChar_9)
    vgaChar_A                                0x20000290   Data           8  vga.o(.data.vgaChar_A)
    vgaChar_B                                0x20000298   Data           8  vga.o(.data.vgaChar_B)
    vgaChar_C                                0x200002a0   Data           8  vga.o(.data.vgaChar_C)
    vgaChar_D                                0x200002a8   Data           8  vga.o(.data.vgaChar_D)
    vgaChar_E                                0x200002b0   Data           8  vga.o(.data.vgaChar_E)
    vgaChar_F                                0x200002b8   Data           8  vga.o(.data.vgaChar_F)
    vgaChar_G                                0x200002c0   Data           8  vga.o(.data.vgaChar_G)
    vgaChar_H                                0x200002c8   Data           8  vga.o(.data.vgaChar_H)
    vgaChar_I                                0x200002d0   Data           8  vga.o(.data.vgaChar_I)
    vgaChar_J                                0x200002d8   Data           8  vga.o(.data.vgaChar_J)
    vgaChar_K                                0x200002e0   Data           8  vga.o(.data.vgaChar_K)
    vgaChar_L                                0x200002e8   Data           8  vga.o(.data.vgaChar_L)
    vgaChar_M                                0x200002f0   Data           8  vga.o(.data.vgaChar_M)
    vgaChar_N                                0x200002f8   Data           8  vga.o(.data.vgaChar_N)
    vgaChar_O                                0x20000300   Data           8  vga.o(.data.vgaChar_O)
    vgaChar_P                                0x20000308   Data           8  vga.o(.data.vgaChar_P)
    vgaChar_Q                                0x20000310   Data           8  vga.o(.data.vgaChar_Q)
    vgaChar_R                                0x20000318   Data           8  vga.o(.data.vgaChar_R)
    vgaChar_S                                0x20000320   Data           8  vga.o(.data.vgaChar_S)
    vgaChar_T                                0x20000328   Data           8  vga.o(.data.vgaChar_T)
    vgaChar_U                                0x20000330   Data           8  vga.o(.data.vgaChar_U)
    vgaChar_V                                0x20000338   Data           8  vga.o(.data.vgaChar_V)
    vgaChar_W                                0x20000340   Data           8  vga.o(.data.vgaChar_W)
    vgaChar_X                                0x20000348   Data           8  vga.o(.data.vgaChar_X)
    vgaChar_Y                                0x20000350   Data           8  vga.o(.data.vgaChar_Y)
    vgaChar_Z                                0x20000358   Data           8  vga.o(.data.vgaChar_Z)
    vgaChar_a                                0x20000360   Data           8  vga.o(.data.vgaChar_a)
    vgaChar_accolade1                        0x20000368   Data           8  vga.o(.data.vgaChar_accolade1)
    vgaChar_accolade2                        0x20000370   Data           8  vga.o(.data.vgaChar_accolade2)
    vgaChar_appostrophe                      0x20000378   Data           8  vga.o(.data.vgaChar_appostrophe)
    vgaChar_arobas                           0x20000380   Data           8  vga.o(.data.vgaChar_arobas)
    vgaChar_asterix                          0x20000388   Data           8  vga.o(.data.vgaChar_asterix)
    vgaChar_b                                0x20000390   Data           8  vga.o(.data.vgaChar_b)
    vgaChar_backslash                        0x20000398   Data           8  vga.o(.data.vgaChar_backslash)
    vgaChar_bar                              0x200003a0   Data           8  vga.o(.data.vgaChar_bar)
    vgaChar_c                                0x200003a8   Data           8  vga.o(.data.vgaChar_c)
    vgaChar_circonflexe                      0x200003b0   Data           8  vga.o(.data.vgaChar_circonflexe)
    vgaChar_colon                            0x200003b8   Data           8  vga.o(.data.vgaChar_colon)
    vgaChar_crochet                          0x200003c0   Data           8  vga.o(.data.vgaChar_crochet)
    vgaChar_d                                0x200003c8   Data           8  vga.o(.data.vgaChar_d)
    vgaChar_dollar                           0x200003d0   Data           8  vga.o(.data.vgaChar_dollar)
    vgaChar_dot                              0x200003d8   Data           8  vga.o(.data.vgaChar_dot)
    vgaChar_e                                0x200003e0   Data           8  vga.o(.data.vgaChar_e)
    vgaChar_eperlu                           0x200003e8   Data           8  vga.o(.data.vgaChar_eperlu)
    vgaChar_equal                            0x200003f0   Data           8  vga.o(.data.vgaChar_equal)
    vgaChar_exclamation                      0x200003f8   Data           8  vga.o(.data.vgaChar_exclamation)
    vgaChar_f                                0x20000400   Data           8  vga.o(.data.vgaChar_f)
    vgaChar_g                                0x20000408   Data           8  vga.o(.data.vgaChar_g)
    vgaChar_h                                0x20000410   Data           8  vga.o(.data.vgaChar_h)
    vgaChar_hash                             0x20000418   Data           8  vga.o(.data.vgaChar_hash)
    vgaChar_i                                0x20000420   Data           8  vga.o(.data.vgaChar_i)
    vgaChar_j                                0x20000428   Data           8  vga.o(.data.vgaChar_j)
    vgaChar_k                                0x20000430   Data           8  vga.o(.data.vgaChar_k)
    vgaChar_l                                0x20000438   Data           8  vga.o(.data.vgaChar_l)
    vgaChar_less                             0x20000440   Data           8  vga.o(.data.vgaChar_less)
    vgaChar_m                                0x20000448   Data           8  vga.o(.data.vgaChar_m)
    vgaChar_minus                            0x20000450   Data           8  vga.o(.data.vgaChar_minus)
    vgaChar_more                             0x20000458   Data           8  vga.o(.data.vgaChar_more)
    vgaChar_n                                0x20000460   Data           8  vga.o(.data.vgaChar_n)
    vgaChar_neg                              0x20000468   Data           8  vga.o(.data.vgaChar_neg)
    vgaChar_o                                0x20000470   Data           8  vga.o(.data.vgaChar_o)
    vgaChar_p                                0x20000478   Data           8  vga.o(.data.vgaChar_p)
    vgaChar_par1                             0x20000480   Data           8  vga.o(.data.vgaChar_par1)
    vgaChar_par2                             0x20000488   Data           8  vga.o(.data.vgaChar_par2)
    vgaChar_plus                             0x20000490   Data           8  vga.o(.data.vgaChar_plus)
    vgaChar_purcent                          0x20000498   Data           8  vga.o(.data.vgaChar_purcent)
    vgaChar_q                                0x200004a0   Data           8  vga.o(.data.vgaChar_q)
    vgaChar_question                         0x200004a8   Data           8  vga.o(.data.vgaChar_question)
    vgaChar_r                                0x200004b0   Data           8  vga.o(.data.vgaChar_r)
    vgaChar_s                                0x200004b8   Data           8  vga.o(.data.vgaChar_s)
    vgaChar_semicolon                        0x200004c0   Data           8  vga.o(.data.vgaChar_semicolon)
    vgaChar_slash                            0x200004c8   Data           8  vga.o(.data.vgaChar_slash)
    vgaChar_sqrt1                            0x200004d0   Data           8  vga.o(.data.vgaChar_sqrt1)
    vgaChar_sqrt2                            0x200004d8   Data           8  vga.o(.data.vgaChar_sqrt2)
    vgaChar_t                                0x200004e0   Data           8  vga.o(.data.vgaChar_t)
    vgaChar_twoDots                          0x200004e8   Data           8  vga.o(.data.vgaChar_twoDots)
    vgaChar_u                                0x200004f0   Data           8  vga.o(.data.vgaChar_u)
    vgaChar_underscore                       0x200004f8   Data           8  vga.o(.data.vgaChar_underscore)
    vgaChar_v                                0x20000500   Data           8  vga.o(.data.vgaChar_v)
    vgaChar_w                                0x20000508   Data           8  vga.o(.data.vgaChar_w)
    vgaChar_x                                0x20000510   Data           8  vga.o(.data.vgaChar_x)
    vgaChar_y                                0x20000518   Data           8  vga.o(.data.vgaChar_y)
    vgaChar_z                                0x20000520   Data           8  vga.o(.data.vgaChar_z)
    __libspace_start                         0x20000528   Data          96  libspace.o(.bss)
    __temporary_stack_top$libspace           0x20000588   Data           0  libspace.o(.bss)
    uartRxFlag                               0x20000588   Data           1  main.o(.bss..L_MergedGlobals.1)
    vgaFlag                                  0x20000589   Data           1  main.o(.bss..L_MergedGlobals.1)
    .bss.os.msgqueue.cb$$Base                0x200085d8   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x2000860c   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x2000865c   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x200086e4   Number         0  rtx_lib.o(.bss.os.thread.cb)
    uartBuff                                 0x20008ae9   Data         128  comport.o(.bss.uartBuff)
    vgaChar_space                            0x20008b69   Data           8  vga.o(.bss.vgaChar_space)
    vgaScreenBuff                            0x20008b71   Data       14400  main.o(.bss.vgaScreenBuff)
    vgaScreenBuff2                           0x2000c3b1   Data       14400  main.o(.bss.vgaScreenBuff2)



==============================================================================

Memory Map of the image

  Image Entry point : 0x080002ad

  Load Region LR_1 (Base: 0x08000000, Size: 0x00002aa8, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x000028a0])

    Execution Region ER_RO (Exec base: 0x08000000, Load base: 0x08000000, Size: 0x00002580, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x08000000   0x08000000   0x000001c4   Data   RO          214    RESET               startup_stm32f446xx.o
    0x080001c4   0x080001c4   0x00000008   Code   RO          718  * !!!main             c_w.l(__main.o)
    0x080001cc   0x080001cc   0x00000034   Code   RO          883    !!!scatter          c_w.l(__scatter.o)
    0x08000200   0x08000200   0x0000005a   Code   RO          881    !!dczerorl2         c_w.l(__dczerorl2.o)
    0x0800025a   0x0800025a   0x00000002   PAD
    0x0800025c   0x0800025c   0x0000001c   Code   RO          885    !!handler_zi        c_w.l(__scatter_zi.o)
    0x08000278   0x08000278   0x00000002   Code   RO          745    .ARM.Collect$$libinit$$00000000  c_w.l(libinit.o)
    0x0800027a   0x0800027a   0x00000004   Code   RO          751    .ARM.Collect$$libinit$$00000001  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          754    .ARM.Collect$$libinit$$00000004  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          757    .ARM.Collect$$libinit$$0000000A  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          759    .ARM.Collect$$libinit$$0000000C  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          761    .ARM.Collect$$libinit$$0000000E  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          764    .ARM.Collect$$libinit$$00000011  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          766    .ARM.Collect$$libinit$$00000013  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          768    .ARM.Collect$$libinit$$00000015  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          770    .ARM.Collect$$libinit$$00000017  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          772    .ARM.Collect$$libinit$$00000019  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          774    .ARM.Collect$$libinit$$0000001B  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          776    .ARM.Collect$$libinit$$0000001D  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          778    .ARM.Collect$$libinit$$0000001F  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          780    .ARM.Collect$$libinit$$00000021  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          782    .ARM.Collect$$libinit$$00000023  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          784    .ARM.Collect$$libinit$$00000025  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          788    .ARM.Collect$$libinit$$0000002C  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          790    .ARM.Collect$$libinit$$0000002E  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          792    .ARM.Collect$$libinit$$00000030  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000000   Code   RO          794    .ARM.Collect$$libinit$$00000032  c_w.l(libinit2.o)
    0x0800027e   0x0800027e   0x00000002   Code   RO          795    .ARM.Collect$$libinit$$00000033  c_w.l(libinit2.o)
    0x08000280   0x08000280   0x00000002   Code   RO          817    .ARM.Collect$$libshutdown$$00000000  c_w.l(libshutdown.o)
    0x08000282   0x08000282   0x00000000   Code   RO          832    .ARM.Collect$$libshutdown$$00000002  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000000   Code   RO          834    .ARM.Collect$$libshutdown$$00000004  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000000   Code   RO          837    .ARM.Collect$$libshutdown$$00000007  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000000   Code   RO          840    .ARM.Collect$$libshutdown$$0000000A  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000000   Code   RO          842    .ARM.Collect$$libshutdown$$0000000C  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000000   Code   RO          845    .ARM.Collect$$libshutdown$$0000000F  c_w.l(libshutdown2.o)
    0x08000282   0x08000282   0x00000002   Code   RO          846    .ARM.Collect$$libshutdown$$00000010  c_w.l(libshutdown2.o)
    0x08000284   0x08000284   0x00000000   Code   RO          720    .ARM.Collect$$rtentry$$00000000  c_w.l(__rtentry.o)
    0x08000284   0x08000284   0x00000000   Code   RO          724    .ARM.Collect$$rtentry$$00000002  c_w.l(__rtentry2.o)
    0x08000284   0x08000284   0x00000006   Code   RO          736    .ARM.Collect$$rtentry$$00000004  c_w.l(__rtentry4.o)
    0x0800028a   0x0800028a   0x00000008   Code   RO          725    .ARM.Collect$$rtentry$$00000008  c_w.l(__rtentry2.o)
    0x08000292   0x08000292   0x00000004   Code   RO          727    .ARM.Collect$$rtentry$$0000000A  c_w.l(__rtentry2.o)
    0x08000296   0x08000296   0x00000000   Code   RO          729    .ARM.Collect$$rtentry$$0000000C  c_w.l(__rtentry2.o)
    0x08000296   0x08000296   0x00000008   Code   RO          730    .ARM.Collect$$rtentry$$0000000D  c_w.l(__rtentry2.o)
    0x0800029e   0x0800029e   0x00000002   Code   RO          749    .ARM.Collect$$rtexit$$00000000  c_w.l(rtexit.o)
    0x080002a0   0x080002a0   0x00000000   Code   RO          797    .ARM.Collect$$rtexit$$00000002  c_w.l(rtexit2.o)
    0x080002a0   0x080002a0   0x00000004   Code   RO          798    .ARM.Collect$$rtexit$$00000003  c_w.l(rtexit2.o)
    0x080002a4   0x080002a4   0x00000006   Code   RO          799    .ARM.Collect$$rtexit$$00000004  c_w.l(rtexit2.o)
    0x080002aa   0x080002aa   0x00000002   PAD
    0x080002ac   0x080002ac   0x00000040   Code   RO          215  * .text               startup_stm32f446xx.o
    0x080002ec   0x080002ec   0x000000c8   Code   RO          532    .text               RTX_CM4F.lib(irq_armv7m.o)
    0x080003b4   0x080003b4   0x0000008a   Code   RO          710    .text               c_w.l(rt_memcpy_v6.o)
    0x0800043e   0x0800043e   0x00000044   Code   RO          712    .text               c_w.l(rt_memclr.o)
    0x08000482   0x08000482   0x0000004e   Code   RO          714    .text               c_w.l(rt_memclr_w.o)
    0x080004d0   0x080004d0   0x00000006   Code   RO          716    .text               c_w.l(heapauxi.o)
    0x080004d6   0x080004d6   0x00000064   Code   RO          721    .text               c_w.l(rt_memcpy_w.o)
    0x0800053a   0x0800053a   0x0000004a   Code   RO          738    .text               c_w.l(sys_stackheap_outer.o)
    0x08000584   0x08000584   0x00000012   Code   RO          740    .text               c_w.l(exit.o)
    0x08000596   0x08000596   0x00000002   PAD
    0x08000598   0x08000598   0x00000008   Code   RO          746    .text               c_w.l(libspace.o)
    0x080005a0   0x080005a0   0x0000000c   Code   RO          807    .text               c_w.l(sys_exit.o)
    0x080005ac   0x080005ac   0x00000002   Code   RO          822    .text               c_w.l(use_no_semi.o)
    0x080005ae   0x080005ae   0x00000000   Code   RO          824    .text               c_w.l(indicate_semi.o)
    0x080005ae   0x080005ae   0x00000040   Code   RO          648    .text.MessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x080005ee   0x080005ee   0x00000058   Code   RO          642    .text.MessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08000646   0x08000646   0x0000001c   Code   RO          640    .text.MessageQueueRemove  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08000662   0x08000662   0x00000002   PAD
    0x08000664   0x08000664   0x0000000c   Code   RO          686    .text.OS_Tick_AcknowledgeIRQ  RTX_CM4F.lib(os_systick.o)
    0x08000670   0x08000670   0x0000000c   Code   RO          295    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_kernel.o)
    0x0800067c   0x0800067c   0x0000000c   Code   RO          656    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08000688   0x08000688   0x0000007c   Code   RO          224    .text.SystemCoreClockUpdate  system_stm32f4xx.o
    0x08000704   0x08000704   0x0000001a   Code   RO          222    .text.SystemInit    system_stm32f4xx.o
    0x0800071e   0x0800071e   0x00000002   PAD
    0x08000720   0x08000720   0x0000008a   Code   RO            2    .text.TIM2_IRQHandler  main.o
    0x080007aa   0x080007aa   0x00000002   PAD
    0x080007ac   0x080007ac   0x00000066   Code   RO            4    .text.TIM3_IRQHandler  main.o
    0x08000812   0x08000812   0x00000002   PAD
    0x08000814   0x08000814   0x00000048   Code   RO          473    .text.TimerInsert   RTX_CM4F.lib(rtx_timer.o)
    0x0800085c   0x0800085c   0x00000058   Code   RO            6    .text.USART2_IRQHandler  main.o
    0x080008b4   0x080008b4   0x0000002e   Code   RO           46    .text.VGACreateFrame  vga.o
    0x080008e2   0x080008e2   0x00000002   PAD
    0x080008e4   0x080008e4   0x000001f0   Code   RO           50    .text.VGADrawCircle  vga.o
    0x08000ad4   0x08000ad4   0x000002e2   Code   RO           48    .text.VGADrawRect   vga.o
    0x08000db6   0x08000db6   0x00000002   PAD
    0x08000db8   0x08000db8   0x000001b0   Code   RO           52    .text.VGAPutChar    vga.o
    0x08000f68   0x08000f68   0x00000036   Code   RO          174    .text._mutex_acquire  rtx_lib.o
    0x08000f9e   0x08000f9e   0x00000002   PAD
    0x08000fa0   0x08000fa0   0x00000006   Code   RO          178    .text._mutex_free   rtx_lib.o
    0x08000fa6   0x08000fa6   0x00000002   PAD
    0x08000fa8   0x08000fa8   0x00000020   Code   RO          172    .text._mutex_initialize  rtx_lib.o
    0x08000fc8   0x08000fc8   0x00000032   Code   RO          176    .text._mutex_release  rtx_lib.o
    0x08000ffa   0x08000ffa   0x00000002   PAD
    0x08000ffc   0x08000ffc   0x00000004   Code   RO          168    .text._platform_post_stackheap_init  rtx_lib.o
    0x08001000   0x08001000   0x00000160   Code   RO            8    .text.main          main.o
    0x08001160   0x08001160   0x00000030   Code   RO          247    .text.osKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x08001190   0x08001190   0x0000002c   Code   RO          241    .text.osKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x080011bc   0x080011bc   0x00000070   Code   RO          616    .text.osMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x0800122c   0x0800122c   0x00000080   Code   RO          614    .text.osMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x080012ac   0x080012ac   0x00000024   Code   RO          505    .text.osMutexAcquire  RTX_CM4F.lib(rtx_mutex.o)
    0x080012d0   0x080012d0   0x00000024   Code   RO          511    .text.osMutexDelete  RTX_CM4F.lib(rtx_mutex.o)
    0x080012f4   0x080012f4   0x00000024   Code   RO          501    .text.osMutexNew    RTX_CM4F.lib(rtx_mutex.o)
    0x08001318   0x08001318   0x00000024   Code   RO          507    .text.osMutexRelease  RTX_CM4F.lib(rtx_mutex.o)
    0x0800133c   0x0800133c   0x00000002   Code   RO          204    .text.osRtxErrorNotify  rtx_config.o
    0x0800133e   0x0800133e   0x00000004   Code   RO          239    .text.osRtxKernelErrorNotify  RTX_CM4F.lib(rtx_kernel.o)
    0x08001342   0x08001342   0x00000002   Code   RO          237    .text.osRtxKernelPreInit  RTX_CM4F.lib(rtx_kernel.o)
    0x08001344   0x08001344   0x0000006c   Code   RO          542    .text.osRtxMemoryAlloc  RTX_CM4F.lib(rtx_memory.o)
    0x080013b0   0x080013b0   0x00000042   Code   RO          544    .text.osRtxMemoryFree  RTX_CM4F.lib(rtx_memory.o)
    0x080013f2   0x080013f2   0x00000036   Code   RO          540    .text.osRtxMemoryInit  RTX_CM4F.lib(rtx_memory.o)
    0x08001428   0x08001428   0x0000003a   Code   RO          556    .text.osRtxMemoryPoolAlloc  RTX_CM4F.lib(rtx_mempool.o)
    0x08001462   0x08001462   0x0000004a   Code   RO          558    .text.osRtxMemoryPoolFree  RTX_CM4F.lib(rtx_mempool.o)
    0x080014ac   0x080014ac   0x00000038   Code   RO          554    .text.osRtxMemoryPoolInit  RTX_CM4F.lib(rtx_mempool.o)
    0x080014e4   0x080014e4   0x000000aa   Code   RO          638    .text.osRtxMessageQueuePostProcess  RTX_CM4F.lib(rtx_msgqueue.o)
    0x0800158e   0x0800158e   0x00000002   PAD
    0x08001590   0x08001590   0x00000024   Code   RO          606    .text.osRtxMessageQueueTimerSetup  RTX_CM4F.lib(rtx_msgqueue.o)
    0x080015b4   0x080015b4   0x00000042   Code   RO          499    .text.osRtxMutexOwnerRestore  RTX_CM4F.lib(rtx_mutex.o)
    0x080015f6   0x080015f6   0x00000002   PAD
    0x080015f8   0x080015f8   0x00000088   Code   RO          668    .text.osRtxPendSV_Handler  RTX_CM4F.lib(rtx_system.o)
    0x08001680   0x08001680   0x00000070   Code   RO          670    .text.osRtxPostProcess  RTX_CM4F.lib(rtx_system.o)
    0x080016f0   0x080016f0   0x00000034   Code   RO          329    .text.osRtxThreadBlock  RTX_CM4F.lib(rtx_thread.o)
    0x08001724   0x08001724   0x0000007c   Code   RO          337    .text.osRtxThreadDelayInsert  RTX_CM4F.lib(rtx_thread.o)
    0x080017a0   0x080017a0   0x0000003c   Code   RO          333    .text.osRtxThreadDelayRemove  RTX_CM4F.lib(rtx_thread.o)
    0x080017dc   0x080017dc   0x00000048   Code   RO          319    .text.osRtxThreadDelayTick  RTX_CM4F.lib(rtx_thread.o)
    0x08001824   0x08001824   0x00000050   Code   RO          327    .text.osRtxThreadDispatch  RTX_CM4F.lib(rtx_thread.o)
    0x08001874   0x08001874   0x00000012   Code   RO          311    .text.osRtxThreadListGet  RTX_CM4F.lib(rtx_thread.o)
    0x08001886   0x08001886   0x0000002c   Code   RO          309    .text.osRtxThreadListPut  RTX_CM4F.lib(rtx_thread.o)
    0x080018b2   0x080018b2   0x00000014   Code   RO          315    .text.osRtxThreadListRemove  RTX_CM4F.lib(rtx_thread.o)
    0x080018c6   0x080018c6   0x0000000c   Code   RO          321    .text.osRtxThreadListRoot  RTX_CM4F.lib(rtx_thread.o)
    0x080018d2   0x080018d2   0x00000026   Code   RO          313    .text.osRtxThreadListSort  RTX_CM4F.lib(rtx_thread.o)
    0x080018f8   0x080018f8   0x00000010   Code   RO          317    .text.osRtxThreadReadyPut  RTX_CM4F.lib(rtx_thread.o)
    0x08001908   0x08001908   0x00000014   Code   RO          323    .text.osRtxThreadRegPtr  RTX_CM4F.lib(rtx_thread.o)
    0x0800191c   0x0800191c   0x0000000c   Code   RO          325    .text.osRtxThreadSwitch  RTX_CM4F.lib(rtx_thread.o)
    0x08001928   0x08001928   0x0000003c   Code   RO          335    .text.osRtxThreadWaitEnter  RTX_CM4F.lib(rtx_thread.o)
    0x08001964   0x08001964   0x00000030   Code   RO          331    .text.osRtxThreadWaitExit  RTX_CM4F.lib(rtx_thread.o)
    0x08001994   0x08001994   0x00000074   Code   RO          666    .text.osRtxTick_Handler  RTX_CM4F.lib(rtx_system.o)
    0x08001a08   0x08001a08   0x00000020   Code   RO          455    .text.osRtxTimerSetup  RTX_CM4F.lib(rtx_timer.o)
    0x08001a28   0x08001a28   0x00000020   Code   RO          459    .text.osRtxTimerThread  RTX_CM4F.lib(rtx_timer.o)
    0x08001a48   0x08001a48   0x00000070   Code   RO          457    .text.osRtxTimerTick  RTX_CM4F.lib(rtx_timer.o)
    0x08001ab8   0x08001ab8   0x0000036c   Code   RO           24    .text.startup       drivers.o
    0x08001e24   0x08001e24   0x0000000c   Code   RO          249    .text.svcRtxKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x08001e30   0x08001e30   0x000000fc   Code   RO          279    .text.svcRtxKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x08001f2c   0x08001f2c   0x000000d4   Code   RO          650    .text.svcRtxMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08002000   0x08002000   0x00000114   Code   RO          608    .text.svcRtxMessageQueueNew  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08002114   0x08002114   0x000000b4   Code   RO          646    .text.svcRtxMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x080021c8   0x080021c8   0x0000008c   Code   RO          517    .text.svcRtxMutexAcquire  RTX_CM4F.lib(rtx_mutex.o)
    0x08002254   0x08002254   0x000000ac   Code   RO          523    .text.svcRtxMutexDelete  RTX_CM4F.lib(rtx_mutex.o)
    0x08002300   0x08002300   0x00000068   Code   RO          513    .text.svcRtxMutexNew  RTX_CM4F.lib(rtx_mutex.o)
    0x08002368   0x08002368   0x000000b4   Code   RO          519    .text.svcRtxMutexRelease  RTX_CM4F.lib(rtx_mutex.o)
    0x0800241c   0x0800241c   0x0000001a   Code   RO          805    x$fpl$fpinit        fz_wm.l(fpinit.o)
    0x08002436   0x08002436   0x00000002   PAD
    0x08002438   0x08002438   0x000000a8   Data   RO          184    .rodata             rtx_lib.o
    0x080024e0   0x080024e0   0x00000010   Data   RO          227    .rodata.AHBPrescTable  system_stm32f4xx.o
    0x080024f0   0x080024f0   0x00000004   Data   RO          186    .rodata.osRtxUserSVC  rtx_lib.o
    0x080024f4   0x080024f4   0x00000024   Data   RO          181    .rodata.os_idle_thread_attr  rtx_lib.o
    0x08002518   0x08002518   0x00000018   Data   RO          183    .rodata.os_timer_mq_attr  rtx_lib.o
    0x08002530   0x08002530   0x00000024   Data   RO          182    .rodata.os_timer_thread_attr  rtx_lib.o
    0x08002554   0x08002554   0x0000000b   Data   RO          299    .rodata.str1.4      RTX_CM4F.lib(rtx_kernel.o)
    0x0800255f   0x0800255f   0x00000001   PAD
    0x08002560   0x08002560   0x00000020   Data   RO          880    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Exec base: 0x20000000, Load base: 0x08002580, Size: 0x00000528, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x00000320])

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000000   COMPRESSED   0x0000001c   Data   RW           14    .data..L_MergedGlobals  main.o
    0x2000001c   COMPRESSED   0x00000004   Data   RW          226    .data.SystemCoreClock  system_stm32f4xx.o
    0x20000020   COMPRESSED   0x000000a4   Data   RW          300    .data.os            RTX_CM4F.lib(rtx_kernel.o)
    0x200000c4   COMPRESSED   0x0000017c   Data   RW          148    .data.vgaChar       vga.o
    0x20000240   COMPRESSED   0x00000008   Data   RW          106    .data.vgaChar_0     vga.o
    0x20000248   COMPRESSED   0x00000008   Data   RW          107    .data.vgaChar_1     vga.o
    0x20000250   COMPRESSED   0x00000008   Data   RW          108    .data.vgaChar_2     vga.o
    0x20000258   COMPRESSED   0x00000008   Data   RW          109    .data.vgaChar_3     vga.o
    0x20000260   COMPRESSED   0x00000008   Data   RW          110    .data.vgaChar_4     vga.o
    0x20000268   COMPRESSED   0x00000008   Data   RW          111    .data.vgaChar_5     vga.o
    0x20000270   COMPRESSED   0x00000008   Data   RW          112    .data.vgaChar_6     vga.o
    0x20000278   COMPRESSED   0x00000008   Data   RW          113    .data.vgaChar_7     vga.o
    0x20000280   COMPRESSED   0x00000008   Data   RW          114    .data.vgaChar_8     vga.o
    0x20000288   COMPRESSED   0x00000008   Data   RW          115    .data.vgaChar_9     vga.o
    0x20000290   COMPRESSED   0x00000008   Data   RW           54    .data.vgaChar_A     vga.o
    0x20000298   COMPRESSED   0x00000008   Data   RW           55    .data.vgaChar_B     vga.o
    0x200002a0   COMPRESSED   0x00000008   Data   RW           56    .data.vgaChar_C     vga.o
    0x200002a8   COMPRESSED   0x00000008   Data   RW           57    .data.vgaChar_D     vga.o
    0x200002b0   COMPRESSED   0x00000008   Data   RW           58    .data.vgaChar_E     vga.o
    0x200002b8   COMPRESSED   0x00000008   Data   RW           59    .data.vgaChar_F     vga.o
    0x200002c0   COMPRESSED   0x00000008   Data   RW           60    .data.vgaChar_G     vga.o
    0x200002c8   COMPRESSED   0x00000008   Data   RW           61    .data.vgaChar_H     vga.o
    0x200002d0   COMPRESSED   0x00000008   Data   RW           62    .data.vgaChar_I     vga.o
    0x200002d8   COMPRESSED   0x00000008   Data   RW           63    .data.vgaChar_J     vga.o
    0x200002e0   COMPRESSED   0x00000008   Data   RW           64    .data.vgaChar_K     vga.o
    0x200002e8   COMPRESSED   0x00000008   Data   RW           65    .data.vgaChar_L     vga.o
    0x200002f0   COMPRESSED   0x00000008   Data   RW           66    .data.vgaChar_M     vga.o
    0x200002f8   COMPRESSED   0x00000008   Data   RW           67    .data.vgaChar_N     vga.o
    0x20000300   COMPRESSED   0x00000008   Data   RW           68    .data.vgaChar_O     vga.o
    0x20000308   COMPRESSED   0x00000008   Data   RW           69    .data.vgaChar_P     vga.o
    0x20000310   COMPRESSED   0x00000008   Data   RW           70    .data.vgaChar_Q     vga.o
    0x20000318   COMPRESSED   0x00000008   Data   RW           71    .data.vgaChar_R     vga.o
    0x20000320   COMPRESSED   0x00000008   Data   RW           72    .data.vgaChar_S     vga.o
    0x20000328   COMPRESSED   0x00000008   Data   RW           73    .data.vgaChar_T     vga.o
    0x20000330   COMPRESSED   0x00000008   Data   RW           74    .data.vgaChar_U     vga.o
    0x20000338   COMPRESSED   0x00000008   Data   RW           75    .data.vgaChar_V     vga.o
    0x20000340   COMPRESSED   0x00000008   Data   RW           76    .data.vgaChar_W     vga.o
    0x20000348   COMPRESSED   0x00000008   Data   RW           77    .data.vgaChar_X     vga.o
    0x20000350   COMPRESSED   0x00000008   Data   RW           78    .data.vgaChar_Y     vga.o
    0x20000358   COMPRESSED   0x00000008   Data   RW           79    .data.vgaChar_Z     vga.o
    0x20000360   COMPRESSED   0x00000008   Data   RW           80    .data.vgaChar_a     vga.o
    0x20000368   COMPRESSED   0x00000008   Data   RW          143    .data.vgaChar_accolade1  vga.o
    0x20000370   COMPRESSED   0x00000008   Data   RW          144    .data.vgaChar_accolade2  vga.o
    0x20000378   COMPRESSED   0x00000008   Data   RW          126    .data.vgaChar_appostrophe  vga.o
    0x20000380   COMPRESSED   0x00000008   Data   RW          135    .data.vgaChar_arobas  vga.o
    0x20000388   COMPRESSED   0x00000008   Data   RW          120    .data.vgaChar_asterix  vga.o
    0x20000390   COMPRESSED   0x00000008   Data   RW           81    .data.vgaChar_b     vga.o
    0x20000398   COMPRESSED   0x00000008   Data   RW          140    .data.vgaChar_backslash  vga.o
    0x200003a0   COMPRESSED   0x00000008   Data   RW          139    .data.vgaChar_bar   vga.o
    0x200003a8   COMPRESSED   0x00000008   Data   RW           82    .data.vgaChar_c     vga.o
    0x200003b0   COMPRESSED   0x00000008   Data   RW          130    .data.vgaChar_circonflexe  vga.o
    0x200003b8   COMPRESSED   0x00000008   Data   RW          131    .data.vgaChar_colon  vga.o
    0x200003c0   COMPRESSED   0x00000008   Data   RW          117    .data.vgaChar_crochet  vga.o
    0x200003c8   COMPRESSED   0x00000008   Data   RW           83    .data.vgaChar_d     vga.o
    0x200003d0   COMPRESSED   0x00000008   Data   RW          128    .data.vgaChar_dollar  vga.o
    0x200003d8   COMPRESSED   0x00000008   Data   RW          124    .data.vgaChar_dot   vga.o
    0x200003e0   COMPRESSED   0x00000008   Data   RW           84    .data.vgaChar_e     vga.o
    0x200003e8   COMPRESSED   0x00000008   Data   RW          116    .data.vgaChar_eperlu  vga.o
    0x200003f0   COMPRESSED   0x00000008   Data   RW          123    .data.vgaChar_equal  vga.o
    0x200003f8   COMPRESSED   0x00000008   Data   RW          125    .data.vgaChar_exclamation  vga.o
    0x20000400   COMPRESSED   0x00000008   Data   RW           85    .data.vgaChar_f     vga.o
    0x20000408   COMPRESSED   0x00000008   Data   RW           86    .data.vgaChar_g     vga.o
    0x20000410   COMPRESSED   0x00000008   Data   RW           87    .data.vgaChar_h     vga.o
    0x20000418   COMPRESSED   0x00000008   Data   RW          127    .data.vgaChar_hash  vga.o
    0x20000420   COMPRESSED   0x00000008   Data   RW           88    .data.vgaChar_i     vga.o
    0x20000428   COMPRESSED   0x00000008   Data   RW           89    .data.vgaChar_j     vga.o
    0x20000430   COMPRESSED   0x00000008   Data   RW           90    .data.vgaChar_k     vga.o
    0x20000438   COMPRESSED   0x00000008   Data   RW           91    .data.vgaChar_l     vga.o
    0x20000440   COMPRESSED   0x00000008   Data   RW          137    .data.vgaChar_less  vga.o
    0x20000448   COMPRESSED   0x00000008   Data   RW           92    .data.vgaChar_m     vga.o
    0x20000450   COMPRESSED   0x00000008   Data   RW          122    .data.vgaChar_minus  vga.o
    0x20000458   COMPRESSED   0x00000008   Data   RW          138    .data.vgaChar_more  vga.o
    0x20000460   COMPRESSED   0x00000008   Data   RW           93    .data.vgaChar_n     vga.o
    0x20000468   COMPRESSED   0x00000008   Data   RW          147    .data.vgaChar_neg   vga.o
    0x20000470   COMPRESSED   0x00000008   Data   RW           94    .data.vgaChar_o     vga.o
    0x20000478   COMPRESSED   0x00000008   Data   RW           95    .data.vgaChar_p     vga.o
    0x20000480   COMPRESSED   0x00000008   Data   RW          118    .data.vgaChar_par1  vga.o
    0x20000488   COMPRESSED   0x00000008   Data   RW          119    .data.vgaChar_par2  vga.o
    0x20000490   COMPRESSED   0x00000008   Data   RW          121    .data.vgaChar_plus  vga.o
    0x20000498   COMPRESSED   0x00000008   Data   RW          129    .data.vgaChar_purcent  vga.o
    0x200004a0   COMPRESSED   0x00000008   Data   RW           96    .data.vgaChar_q     vga.o
    0x200004a8   COMPRESSED   0x00000008   Data   RW          134    .data.vgaChar_question  vga.o
    0x200004b0   COMPRESSED   0x00000008   Data   RW           97    .data.vgaChar_r     vga.o
    0x200004b8   COMPRESSED   0x00000008   Data   RW           98    .data.vgaChar_s     vga.o
    0x200004c0   COMPRESSED   0x00000008   Data   RW          133    .data.vgaChar_semicolon  vga.o
    0x200004c8   COMPRESSED   0x00000008   Data   RW          136    .data.vgaChar_slash  vga.o
    0x200004d0   COMPRESSED   0x00000008   Data   RW          141    .data.vgaChar_sqrt1  vga.o
    0x200004d8   COMPRESSED   0x00000008   Data   RW          142    .data.vgaChar_sqrt2  vga.o
    0x200004e0   COMPRESSED   0x00000008   Data   RW           99    .data.vgaChar_t     vga.o
    0x200004e8   COMPRESSED   0x00000008   Data   RW          132    .data.vgaChar_twoDots  vga.o
    0x200004f0   COMPRESSED   0x00000008   Data   RW          100    .data.vgaChar_u     vga.o
    0x200004f8   COMPRESSED   0x00000008   Data   RW          145    .data.vgaChar_underscore  vga.o
    0x20000500   COMPRESSED   0x00000008   Data   RW          101    .data.vgaChar_v     vga.o
    0x20000508   COMPRESSED   0x00000008   Data   RW          102    .data.vgaChar_w     vga.o
    0x20000510   COMPRESSED   0x00000008   Data   RW          103    .data.vgaChar_x     vga.o
    0x20000518   COMPRESSED   0x00000008   Data   RW          104    .data.vgaChar_y     vga.o
    0x20000520   COMPRESSED   0x00000008   Data   RW          105    .data.vgaChar_z     vga.o


    Execution Region ER_ZI (Exec base: 0x20000528, Load base: 0x080028a0, Size: 0x0000fcd0, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000528        -       0x00000060   Zero   RW          747    .bss                c_w.l(libspace.o)
    0x20000588        -       0x0000000c   Zero   RW           15    .bss..L_MergedGlobals.1  main.o
    0x20000594        -       0x00000004   Zero   RW           12    .bss.TIM2_IRQHandler.line  main.o
    0x20000598        -       0x00008040   Zero   RW          180    .bss.os             rtx_lib.o
    0x200085d8        -       0x00000034   Zero   RW          191    .bss.os.msgqueue.cb  rtx_lib.o
    0x2000860c        -       0x00000050   Zero   RW          192    .bss.os.msgqueue.mem  rtx_lib.o
    0x2000865c        -       0x00000088   Zero   RW          188    .bss.os.thread.cb   rtx_lib.o
    0x200086e4   0x080028a0   0x00000004   PAD
    0x200086e8        -       0x00000200   Zero   RW          189    .bss.os.thread.idle.stack  rtx_lib.o
    0x200088e8        -       0x00000200   Zero   RW          190    .bss.os.thread.timer.stack  rtx_lib.o
    0x20008ae8        -       0x00000001   Zero   RW          193    .bss.os_kernel_is_active.os_kernel_active  rtx_lib.o
    0x20008ae9        -       0x00000080   Zero   RW          159    .bss.uartBuff       comport.o
    0x20008b69        -       0x00000008   Zero   RW          146    .bss.vgaChar_space  vga.o
    0x20008b71        -       0x00003840   Zero   RW           10    .bss.vgaScreenBuff  main.o
    0x2000c3b1        -       0x00003840   Zero   RW           11    .bss.vgaScreenBuff2  main.o
    0x2000fbf1   0x080028a0   0x00000007   PAD
    0x2000fbf8        -       0x00000200   Zero   RW          213    HEAP                startup_stm32f446xx.o
    0x2000fdf8        -       0x00000400   Zero   RW          212    STACK               startup_stm32f446xx.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

         0          0          0          0        128       1527   comport.o
       876          0          0          0          0       7695   drivers.o
       680          0          0         28      28816       3178   main.o
         2          0          0          0          0        543   rtx_config.o
       146          0        268          0      34125       7541   rtx_lib.o
        64         26        452          0       1536        872   startup_stm32f446xx.o
       150          0         16          4          0       2818   system_stm32f4xx.o
      1712          0          0       1124          8       7739   vga.o

    ----------------------------------------------------------------------
      3646         26        768       1156      64624      31913   Object Totals
         0          0         32          0          0          0   (incl. Generated)
        16          0          0          0         11          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       200         12          0          0          0        634   irq_armv7m.o
        12          4          0          0          0       3200   os_systick.o
       374         24         11        164          0      16501   rtx_kernel.o
       228          0          0          0          0       2537   rtx_memory.o
       188          0          0          0          0      16008   rtx_mempool.o
      1306         20          0          0          0      18657   rtx_msgqueue.o
       806         24          0          0          0       9962   rtx_mutex.o
       364         14          0          0          0       5296   rtx_system.o
       676          4          0          0          0      31847   rtx_thread.o
       248         16          0          0          0      10397   rtx_timer.o
        90          0          0          0          0          0   __dczerorl2.o
         8          0          0          0          0         68   __main.o
         0          0          0          0          0          0   __rtentry.o
        20          0          0          0          0          0   __rtentry2.o
         6          0          0          0          0          0   __rtentry4.o
        52          8          0          0          0          0   __scatter.o
        28          0          0          0          0          0   __scatter_zi.o
        18          0          0          0          0         80   exit.o
         6          0          0          0          0        152   heapauxi.o
         0          0          0          0          0          0   indicate_semi.o
         2          0          0          0          0          0   libinit.o
         6          0          0          0          0          0   libinit2.o
         2          0          0          0          0          0   libshutdown.o
         2          0          0          0          0          0   libshutdown2.o
         8          4          0          0         96         68   libspace.o
        68          0          0          0          0         68   rt_memclr.o
        78          0          0          0          0         80   rt_memclr_w.o
       138          0          0          0          0         68   rt_memcpy_v6.o
       100          0          0          0          0         80   rt_memcpy_w.o
         2          0          0          0          0          0   rtexit.o
        10          0          0          0          0          0   rtexit2.o
        12          4          0          0          0         68   sys_exit.o
        74          0          0          0          0         80   sys_stackheap_outer.o
         2          0          0          0          0         68   use_no_semi.o
        26          0          0          0          0        116   fpinit.o

    ----------------------------------------------------------------------
      5174        134         12        164         96     116035   Library Totals
        14          0          1          0          0          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      4402        118         11        164          0     115039   RTX_CM4F.lib
       732         16          0          0         96        880   c_w.l
        26          0          0          0          0        116   fz_wm.l

    ----------------------------------------------------------------------
      5174        134         12        164         96     116035   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

      8820        160        780       1320      64720     147360   Grand Totals
      8820        160        780        800      64720     147360   ELF Image Totals (compressed)
      8820        160        780        800          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                 9600 (   9.38kB)
    Total RW  Size (RW Data + ZI Data)             66040 (  64.49kB)
    Total ROM Size (Code + RO Data + RW Data)      10400 (  10.16kB)

==============================================================================

